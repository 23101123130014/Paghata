#include <iostream>
#include <vector>
#include <string>
using namespace std;
struct Item
{
	int id;
	string name;
	double price;
	void display() const {
	cout<<"ID: " << id << "NAME " << name << ",PRICE: " << price;
	}
};

//function prototype
void createItem(vector<Item>& items);
void readItems(const vector<Item>& items);
void updateItem(vector<Item>& items);
void deleteItem(vector<Item>& items);
int main()
{
	int choice;
	vector<Item> items;
	do{
		cout<<"\n -------crude application menu choice------";
		cout<<"\n 1: create item";
		cout<<"\n 2: read item";
		cout<< "\n 3: update item";
		cout<<"\n 4: delete Item ";
		cout<<"\n 5: Exit ";
		cout<<"\n choose the choice above";
		cin>> choice;
		switch(choice)
		{
		case 1:
		createItem(items);
		break;
		case 2:
		readItems(items);
		break;
		case 3:
		updateItem(items);
		break;
		case 4:
		deleteItem(items);
		break;
		default:
		cout<<"\n invalid choice enter oppropriate choice";	
		}
	}
while(choice != 5);
return 0;
}


//function definition to create Item
void createItem(vector<Item>& items)
{
	Item newItem;
	cout<<"\n enter the Item id: ";
	cin>>newItem.id;
	cin.ignore();
	cout<<"\n enter the item name: ";
	getline(cin, newItem.name);
	cout<<"\n enter the item price: ";
	cin>>newItem.price;
	items.push_back(newItem);
	cout<<"\n new item created sucessfully ";
	
}


//function to read items
void readItems(const vector<Item>& items) {
    if (items.empty()) {  // Check if the vector is empty
        cout << "\nNo items found.\n";  // Message if no items are available
    } else {
        cout << "\n--- Item List ---\n";  // Header for the item lists
        for (const auto& item : items) {  // Iterate through each item in the vector
            item.display();  // Call the display function to show item details
        }
    }
}

//funcion to update item



void updateItem(vector<Item>& items)
{
	int id;
	cout<<"\n enter the item to be updated: ";
	cin>>id;
	for(auto& item: items){
		if(item.id == id){
			cin.ignore();
			cout<<"\n enter the new item name";
			getline(cin, item.name);
			cout<<"\n enter the iten price ";
			cin>>item.price;
		return;
		}
	}
	cout<<"\n item with id not found" <<id <<"not found";
	
	
	}	


//function to delete item
// Delete an existing item
void deleteItem(vector<Item>& items) {
    int id;  // Variable to hold the ID of the item to delete
    cout << "\nEnter Item ID to delete: ";
    cin >> id;  // Input the item ID

    for (auto it = items.begin(); it != items.end(); ++it) {  // Iterate through the vector
        if (it->id == id) {  // Check if the current item matches the ID
            items.erase(it);  // Remove the item from the vector
            cout << "Item deleted successfully!\n";  // Confirmation message
            return;  // Exit the function after deleting
        }
    }

    cout << "Item with ID " << id << " not found.\n";  // Message if ID not found
}
